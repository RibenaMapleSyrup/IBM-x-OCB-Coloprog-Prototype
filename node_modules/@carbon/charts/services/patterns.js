// D3 Imports
import { select } from "d3-selection";
import PATTERN_SVGS from "../assets/patterns/index";
import * as Configuration from "../configuration";
var selectors = {
    PATTERNS_CONTAINER: "carbon-charts-patterns"
};
// Helper functions
var trimSVG = function (htmlString) {
    // Remove the CSS style block
    var htmlBeforeStyleBlock = htmlString.substring(0, htmlString.indexOf("<style type=\"text/css\">"));
    var htmlAfterStyleBlock = htmlString.substring(htmlString.indexOf("</style>") + "</style>".length);
    htmlString = htmlBeforeStyleBlock + htmlAfterStyleBlock;
    // Remove Adobe comments
    htmlString = htmlString.replace(/<!--[\s\S]*?-->/g, "");
    return htmlString;
};
var PatternsService = /** @class */ (function () {
    function PatternsService() {
        this.patternAccum = 0;
        this.idAccum = 0;
        this.patternURLs = {};
        this.setDiv();
    }
    /**
     * Sets the container div for pattern SVGs in DOM
     *
     * @memberof PatternsService
     */
    PatternsService.prototype.setDiv = function () {
        this.container = document.getElementById(selectors.PATTERNS_CONTAINER);
        if (!this.container) {
            var div = document.createElement("div");
            div.id = selectors.PATTERNS_CONTAINER;
            this.container = document.body.appendChild(div);
        }
    };
    /**
     * Adds all the pattern SVGs to the container div, applying a unique ID to each one
     *
     * @memberof PatternsService
     */
    PatternsService.prototype.addPatternSVGs = function (d, colorScale, chartContainerID, legendType) {
        var _this = this;
        select(this.container)
            .style("display", "table")
            .style("max-height", 0);
        d.datasets.forEach(function (dataset) {
            var datasetPattern;
            dataset.data.forEach(function (dataPoint, i) {
                var index = i + 1;
                var id = ++_this.idAccum;
                if (!datasetPattern || legendType === Configuration.legend.basedOn.LABELS) {
                    datasetPattern = PATTERN_SVGS[_this.patternAccum++ % PATTERN_SVGS.length].default;
                }
                // Create SVG container div
                var svgContainer = document.createElement("div");
                svgContainer.id = "carbon-" + chartContainerID + "-pattern-container-" + id;
                svgContainer.innerHTML = trimSVG(datasetPattern);
                // Apply id to the svg element
                var mountedSVG = svgContainer.querySelector("svg");
                mountedSVG.id = "carbon-" + chartContainerID + "-pattern-" + id + "-svg";
                // Apply id to the pattern element
                var patternElement = mountedSVG.querySelector("pattern");
                patternElement.id = "carbon-" + chartContainerID + "-pattern-" + id;
                // Remove all IDs to avoid duplicate IDs (accessibility violation)
                mountedSVG.querySelector("g").removeAttribute("id");
                // Apply fills to everything
                var allElementsInsideSVG = Array.prototype.slice.call(mountedSVG.querySelectorAll("pattern g *"));
                allElementsInsideSVG.forEach(function (element, elementIndex) {
                    if (elementIndex > 0) {
                        element.style.fill = colorScale[dataset.label](d.labels[i]);
                        element.style.stroke = colorScale[dataset.label](d.labels[i]);
                    }
                    else {
                        element.style.fill = "transparent";
                    }
                    // Remove ID to avoid duplicate IDs (accessibility violation)
                    element.removeAttribute("id");
                    element.removeAttribute("class");
                });
                var allRectsInsideSVG = Array.prototype.slice.call(mountedSVG.querySelectorAll("rect"));
                allRectsInsideSVG.forEach(function (rectElement) {
                    // Remove all IDs to avoid duplicate IDs (accessibility violation)
                    rectElement.removeAttribute("id");
                });
                // Update pattern widths & heights
                patternElement.setAttribute("width", "" + Configuration.charts.patternFills.width);
                patternElement.setAttribute("height", "" + Configuration.charts.patternFills.height);
                _this.container.appendChild(svgContainer);
                // Add pattern to the list of patterns
                var patternURL = "url(#carbon-" + chartContainerID + "-pattern-" + id + ")";
                if (_this.patternURLs[dataset.label]) {
                    _this.patternURLs[dataset.label].push(patternURL);
                }
                else {
                    _this.patternURLs[dataset.label] = [patternURL];
                }
            });
        });
    };
    PatternsService.prototype.getFillValues = function () {
        return this.patternURLs;
    };
    return PatternsService;
}());
export default PatternsService;
//# sourceMappingURL=/home/travis/build/carbon-design-system/carbon-charts/packages/core/services/patterns.js.map