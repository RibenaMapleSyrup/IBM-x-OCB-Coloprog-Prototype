import { Transition } from "d3-transition";
import { ChartConfig, BaseChartOptions, ChartData } from "./configuration";
import PatternsService from "./services/patterns";
import { ChartOverlay } from "./components/index";
import { ChartTooltip } from "./components/tooltip";
export declare class BaseChart {
    static chartCount: number;
    id: string;
    chartContainerID: string;
    container: any;
    holder: Element;
    svg: any;
    innerWrap: any;
    options: BaseChartOptions;
    data: ChartData;
    displayData: ChartData;
    fixedDataLabels: any;
    patternScale: {};
    colorScale: {};
    patternsService: PatternsService;
    events: any;
    eventHandlers: {
        tooltips: any;
    };
    chartOverlay: ChartOverlay;
    tooltip: ChartTooltip;
    constructor(holder: Element, configs: ChartConfig<BaseChartOptions>);
    styleHolderElement(): void;
    dispatchEvent(eventType: string, eventDetail?: object): void;
    setData(data: any): void;
    getKeysFromData(): {};
    getLegendType(): string;
    setPatterns(): void;
    setColorScale(): void;
    getFillColor(datasetLabel: any, label?: any, value?: any): any;
    getStrokeColor(datasetLabel: any, label?: any, value?: any): any;
    getChartSize(container?: any): {
        height: number;
        width: number;
    };
    removeChart(): void;
    setSVG(): any;
    dataProcessor(data: ChartData): any;
    initialDraw(): void;
    updateChart(): void;
    resizeChart(): void;
    update(value?: any): void;
    resizeWhenContainerChange(): void;
    /**
     * Draws title within the Chart's svg element.
     * @param title
     */
    drawTitle(): void;
    setClickableLegend(): void;
    setChartIDContainer(): {
        chartId: any;
        container: any;
    };
    resetOpacity(): void;
    reduceOpacity(exception: any): void;
    getLegendItems(): {};
    getLegendItemArray(): {
        key: string;
        value: any;
    }[];
    getLegendItemKeys(): string[];
    getDisabledLegendItems(): string[];
    getActiveLegendItems(): string[];
    updateLegend(legend: any): void;
    addLegend(): void;
    positionLegend(): void;
    addOrUpdateLegend(): void;
    addLegendCircleHoverEffect(): void;
    hasLegendExpandBtn(): boolean;
    isLegendOnRight(): boolean;
    /**
     *
     * When a legend item is clicked, apply/remove the appropriate filter
     * @param {string} changedLabel The label of the legend element the user clicked on
     * @memberof PieChart
     */
    applyLegendFilter(changedLabel: string): void;
    setClickableLegendInTooltip(): void;
    addTooltipOpenButtonToLegend(): void;
    openLegendTooltip(target: any): void;
    showLabelTooltip(d: any, leftSide: any): void;
    hideTooltip(): void;
    generateTooltipHTML(label: any, value: any): string;
    getTooltipHTML: (d: any) => string;
    showTooltip(d: any, clickedElement?: Element): void;
    getFillScale(): {};
    getDefaultTransition(type?: string): Transition<any, any, any, any>;
    getInstantTransition(): Transition<any, any, any, any>;
    getFillTransition(animate?: boolean): Transition<any, any, any, any>;
    getBBox(selector: any): any;
}
