{"version":3,"file":"test-tools.js","sourceRoot":"","sources":["src/test-tools.ts"],"names":[],"mappings":"AACA,iBAuFA;AAxFA,aAAa;AACb,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,GAAG,UAAA,YAAY;IAC3D,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;QAChC,IAAM,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,KAAK,aAAa,CAAC,CAAC,CAAC;YACjC,MAAM,GAAG,KAAK,CAAC;QAChB,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,YAAY;AACZ,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAA,SAAS;IAC7C,IAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACtD,eAAe,CAAC,EAAE,GAAG,YAAU,SAAS,kBAAe,CAAC;IACxD,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAE9C,MAAM,CAAC,eAAe,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAA,SAAS;IAC3C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,YAAU,SAAS,kBAAe,CAAC,CAAC;AACpE,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,UAAA,SAAS;IACnC,IAAM,kBAAkB,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;IAC1D,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;QACxB,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAC/D,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,0BAA0B,GAAG,UAAC,QAAQ,EAAE,SAAS;IAC7D,8DAA8D;IAC9D,uFAAuF;IACvF,0BAA0B;IAC1B,iDAAiD;IACjD,wDAAwD;IAExD,uBAAuB;IACvB,KAAK;IAEL,+BAA+B;IAC/B,sBAAsB;IACtB,UAAU;IAEV,gEAAgE;IAChE,gBAAgB;IAChB,8CAA8C;IAC9C,yCAAyC;IAEzC,gEAAgE;IAChE,+EAA+E;IAC/E,2DAA2D;IAC3D,qBAAqB;IACrB,MAAM;IACN,OAAO;IACP,IAAI;IAEJ,gCAAgC;IAChC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,KAAK,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC3E,CAAC,CAAC;AAEF,eAAe;AACf,MAAM,CAAC,IAAM,SAAS,GAAG;IACxB,QAAQ,EAAE,eAAe;IACzB,SAAS,EAAE,cAAc;IACzB,OAAO,EAAE,mBAAmB;IAC5B,UAAU,EAAE,eAAe;IAC3B,GAAG,EAAE;QACJ,KAAK,EAAE,MAAM;KACb;CACD,CAAC;AACF,MAAM,CAAC,IAAM,MAAM,GAAG;IACrB,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;CACT,CAAC","sourcesContent":["// Extensions\nObject.prototype[\"containsKeysAndValuesFrom\"] = sourceObject => {\n\tlet result = true;\n\tObject.keys(sourceObject).map(key => {\n\t\tconst supposedValue = sourceObject[key];\n\t\tif (this[key] !== supposedValue) {\n\t\t\tresult = false;\n\t\t}\n\t});\n\n\treturn true;\n};\n\n// Functions\nexport const createClassyContainer = chartType => {\n\tconst classyContainer = document.createElement(\"div\");\n\tclassyContainer.id = `classy-${chartType}-chart-holder`;\n\tclassyContainer.classList.add(\"chart-holder\");\n\n\treturn classyContainer;\n};\n\nexport const grabClassyContainer = chartType => {\n\treturn document.getElementById(`classy-${chartType}-chart-holder`);\n};\n\nexport const removeChart = chartType => {\n\tconst oldClassyContainer = grabClassyContainer(chartType);\n\tif (oldClassyContainer) {\n\t\toldClassyContainer.parentNode.removeChild(oldClassyContainer);\n\t}\n};\n\nexport const inputAndProcessedDataMatch = (chartObj, inputData) => {\n\t// Gather all pieces of processed data for every type of chart\n\t// const processedDataPoints = chartObj.displayData.reduce((finalArray, dataPoint) => {\n\t// \tif (dataPoint.items) {\n\t// \t\t// this is the \"Other\" label, in Pie & Donut\n\t// \t\tdataPoint.items.map(item => finalArray.push(item));\n\n\t// \t\treturn finalArray;\n\t// \t}\n\n\t// \tfinalArray.push(dataPoint);\n\t// \treturn finalArray;\n\t// }, []);\n\n\t// let result = processedDataPoints.length === inputData.length;\n\t// if (result) {\n\t// \tprocessedDataPoints.forEach(dataPoint => {\n\t// \t\tconsole.log(\"datapoint\", dataPoint);\n\n\t// \t\t// Check if every piece of data in the processed data array\n\t// \t\t// Contains every key-value pair from the input data provided to the chart\n\t// \t\tif (!dataPoint.containsKeysAndValuesFrom(inputData)) {\n\t// \t\t\tresult = false;\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// TODO - Implement Deeper check\n\treturn chartObj.displayData.datasets.length === inputData.datasets.length;\n};\n\n// Objects/data\nexport const selectors = {\n\tOUTERSVG: \"svg.chart-svg\",\n\tINNERWRAP: \"g.inner-wrap\",\n\tTOOLTIP: \"div.chart-tooltip\",\n\tLEGEND_BTN: \"li.legend-btn\",\n\tpie: {\n\t\tSLICE: \"path\"\n\t}\n};\nexport const colors = [\n\t\"#009BEF\",\n\t\"#95D13C\",\n\t\"#785EF0\",\n\t\"#F87EAC\",\n\t\"#FFB000\",\n\t\"#00B6CB\",\n\t\"#FF5C49\",\n\t\"#047CC0\",\n\t\"#FE8500\",\n\t\"#5A3EC8\",\n\t\"#40D5BB\",\n\t\"#FF509E\"\n];\n"]}