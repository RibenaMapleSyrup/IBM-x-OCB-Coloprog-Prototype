{"version":3,"file":"combo-chart.js","sourceRoot":"","sources":["src/combo-chart.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseAxisChart } from \"./base-axis-chart\";\n\nimport * as ChartInstances from \"./index\";\nimport * as Configuration from \"./configuration\";\nimport { ChartConfig, ComboChartOptions, ChartType } from \"./configuration\";\nimport { Tools } from \"./tools\";\n\n// TODO - Support adding/removing charts when updating data\nexport class ComboChart extends BaseAxisChart {\n\t// Includes all the sub-charts\n\tcharts = [];\n\n\toptions: ComboChartOptions;\n\n\tconstructor(holder: Element, configs: ChartConfig<ComboChartOptions>) {\n\t\tsuper(holder, configs);\n\n\t\tthis.options.type = ChartType.COMBO;\n\t}\n\n\t// Extract data related to the specific sub-chart\n\textractDataForChart(chartType: string) {\n\t\treturn Tools.merge({}, this.displayData, {\n\t\t\tdatasets: this.displayData.datasets.filter(_dataset => _dataset.chartType === chartType)\n\t\t});\n\t}\n\n\tupdate() {\n\t\tsuper.update();\n\n\t\tif (this.charts && this.charts.length > 0) {\n\t\t\tthis.updateChildrenScales();\n\t\t\tthis.setChildrenData();\n\t\t}\n\t}\n\n\t// This only needs to be performed in the sub-chart instances\n\tinterpolateValues(newData: any) {\n\t\treturn;\n\t}\n\n\t// This only needs to be performed in the sub-chart instances\n\taddDataPointEventListener() {\n\t\treturn;\n\t}\n\n\tdraw() {\n\t\t// If charts have been initialized\n\t\tif (this.charts.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.displayData.datasets.forEach(dataset => {\n\t\t\t// If the chart type is valid\n\t\t\tif (ChartInstances[dataset.chartType]) {\n\t\t\t\t// If the chart for this dataset has not already been created\n\t\t\t\tif (this.charts.findIndex(chart => chart.type === dataset.chartType) === -1) {\n\t\t\t\t\tif (ChartInstances[dataset.chartType].prototype instanceof BaseAxisChart) {\n\t\t\t\t\t\tconst chartConfigs = {\n\t\t\t\t\t\t\tdata: this.extractDataForChart(dataset.chartType),\n\t\t\t\t\t\t\toptions: Tools.merge({}, this.options, {\n\t\t\t\t\t\t\t\taxis: {\n\t\t\t\t\t\t\t\t\tx: this.x,\n\t\t\t\t\t\t\t\t\ty: this.y,\n\t\t\t\t\t\t\t\t\ty2: this.y2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst chart = new ChartInstances[dataset.chartType](\n\t\t\t\t\t\t\tthis.holder,\n\t\t\t\t\t\t\tchartConfigs\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Override sub-chart update function\n\t\t\t\t\t\tchart.update = function () {\n\t\t\t\t\t\t\tthis.displayData = this.updateDisplayData();\n\n\t\t\t\t\t\t\tthis.interpolateValues(this.displayData);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Add chart to the array of sub-charts\n\t\t\t\t\t\tthis.charts.push({\n\t\t\t\t\t\t\ttype: dataset.chartType,\n\t\t\t\t\t\t\tinstance: chart\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(`Chart type ${dataset.chartType} not supported in Combo - your chart should extend BaseAxisChart`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(`Invalid chart type: \"${dataset.chartType}\"`);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Pass down the x & y scales to the sub-charts\n\tupdateChildrenScales() {\n\t\tthis.charts.forEach(chart => {\n\t\t\tchart.instance.setXScale(this.x);\n\t\t\tchart.instance.setYScale(this.y);\n\t\t});\n\t}\n\n\t// Extract data related to each sub-chart and set them\n\tsetChildrenData() {\n\t\tthis.charts.forEach(chart => {\n\t\t\tconst chartData = this.extractDataForChart(chart.type);\n\n\t\t\tchart.instance.setData(chartData);\n\n\t\t\tconsole.log(`SET ${chart.type} data to`, chartData);\n\t\t});\n\t}\n}\n"]}