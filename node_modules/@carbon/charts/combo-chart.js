var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { BaseAxisChart } from "./base-axis-chart";
import * as ChartInstances from "./index";
import { ChartType } from "./configuration";
import { Tools } from "./tools";
// TODO - Support adding/removing charts when updating data
var ComboChart = /** @class */ (function (_super) {
    __extends(ComboChart, _super);
    function ComboChart(holder, configs) {
        var _this = _super.call(this, holder, configs) || this;
        // Includes all the sub-charts
        _this.charts = [];
        _this.options.type = ChartType.COMBO;
        return _this;
    }
    // Extract data related to the specific sub-chart
    ComboChart.prototype.extractDataForChart = function (chartType) {
        return Tools.merge({}, this.displayData, {
            datasets: this.displayData.datasets.filter(function (_dataset) { return _dataset.chartType === chartType; })
        });
    };
    ComboChart.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this.charts && this.charts.length > 0) {
            this.updateChildrenScales();
            this.setChildrenData();
        }
    };
    // This only needs to be performed in the sub-chart instances
    ComboChart.prototype.interpolateValues = function (newData) {
        return;
    };
    // This only needs to be performed in the sub-chart instances
    ComboChart.prototype.addDataPointEventListener = function () {
        return;
    };
    ComboChart.prototype.draw = function () {
        var _this = this;
        // If charts have been initialized
        if (this.charts.length) {
            return;
        }
        this.displayData.datasets.forEach(function (dataset) {
            // If the chart type is valid
            if (ChartInstances[dataset.chartType]) {
                // If the chart for this dataset has not already been created
                if (_this.charts.findIndex(function (chart) { return chart.type === dataset.chartType; }) === -1) {
                    if (ChartInstances[dataset.chartType].prototype instanceof BaseAxisChart) {
                        var chartConfigs = {
                            data: _this.extractDataForChart(dataset.chartType),
                            options: Tools.merge({}, _this.options, {
                                axis: {
                                    x: _this.x,
                                    y: _this.y,
                                    y2: _this.y2
                                }
                            })
                        };
                        var chart = new ChartInstances[dataset.chartType](_this.holder, chartConfigs);
                        // Override sub-chart update function
                        chart.update = function () {
                            this.displayData = this.updateDisplayData();
                            this.interpolateValues(this.displayData);
                        };
                        // Add chart to the array of sub-charts
                        _this.charts.push({
                            type: dataset.chartType,
                            instance: chart
                        });
                    }
                    else {
                        console.error("Chart type " + dataset.chartType + " not supported in Combo - your chart should extend BaseAxisChart");
                    }
                }
            }
            else {
                console.error("Invalid chart type: \"" + dataset.chartType + "\"");
            }
        });
    };
    // Pass down the x & y scales to the sub-charts
    ComboChart.prototype.updateChildrenScales = function () {
        var _this = this;
        this.charts.forEach(function (chart) {
            chart.instance.setXScale(_this.x);
            chart.instance.setYScale(_this.y);
        });
    };
    // Extract data related to each sub-chart and set them
    ComboChart.prototype.setChildrenData = function () {
        var _this = this;
        this.charts.forEach(function (chart) {
            var chartData = _this.extractDataForChart(chart.type);
            chart.instance.setData(chartData);
            console.log("SET " + chart.type + " data to", chartData);
        });
    };
    return ComboChart;
}(BaseAxisChart));
export { ComboChart };
//# sourceMappingURL=/home/travis/build/carbon-design-system/carbon-charts/packages/core/combo-chart.js.map