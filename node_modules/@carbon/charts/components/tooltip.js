import * as Configuration from "../configuration";
// Carbon position service
import Position, { PLACEMENTS } from "@carbon/utils-position";
// D3 Imports
import { select, selectAll, mouse } from "d3-selection";
var ChartTooltip = /** @class */ (function () {
    function ChartTooltip(container) {
        var _this = this;
        this.positionService = new Position();
        this.getRef = function () { return select(_this.container).select("div.chart-tooltip").node(); };
        this.container = container;
    }
    ChartTooltip.prototype.positionTooltip = function () {
        var _this = this;
        var target = this.getRef();
        var mouseRelativePos = mouse(this.container);
        // Find out whether tooltip should be shown on the left or right side
        var bestPlacementOption = this.positionService.findBestPlacementAt({
            left: mouseRelativePos[0],
            top: mouseRelativePos[1]
        }, target, [
            PLACEMENTS.RIGHT,
            PLACEMENTS.LEFT
        ], function () { return ({
            width: _this.container.offsetWidth,
            height: _this.container.offsetHeight
        }); });
        var horizontalOffset = Configuration.tooltip.magicLeft2;
        if (bestPlacementOption === PLACEMENTS.LEFT) {
            horizontalOffset *= -1;
        }
        // Get coordinates to where tooltip should be positioned
        var pos = this.positionService.findPositionAt({
            left: mouseRelativePos[0] + horizontalOffset,
            top: mouseRelativePos[1]
        }, target, bestPlacementOption);
        this.positionService.setElement(target, pos);
    };
    ChartTooltip.prototype.show = function (contentHTML) {
        // Remove existing tooltips on the page
        // TODO - Update class to not conflict with other elements on page
        selectAll(".chart-tooltip").remove();
        // Draw tooltip
        var tooltip = select(this.container).append("div")
            .attr("class", "tooltip chart-tooltip");
        // Apply html content to the tooltip
        tooltip.append("div")
            .attr("class", "text-box")
            .html(contentHTML);
        // Position the tooltip
        this.positionTooltip();
        // Fade in
        tooltip.style("opacity", 0)
            .transition()
            .duration(Configuration.tooltip.fadeIn.duration)
            .style("opacity", 1);
        // this.addEventListeners();
    };
    ChartTooltip.prototype.hide = function () {
        var tooltipRef = select(this.container).select("div.chart-tooltip");
        // Fade out and remove
        tooltipRef.style("opacity", 1)
            .transition()
            .duration(Configuration.tooltip.fadeOut.duration)
            .style("opacity", 0)
            .remove();
        this.removeEventLinteners();
    };
    ChartTooltip.prototype.handleTooltipEvents = function (evt) {
        // If keyboard event
        if (evt["key"]) {
            if (evt["key"] === "Escape" || evt["key"] === "Esc") {
                this.hide();
            }
        }
        else {
            var targetTagName = evt.target["tagName"];
            var targetsToBeSkipped = Configuration.options.BASE.tooltip.targetsToSkip;
            if (targetsToBeSkipped.indexOf(targetTagName) === -1) {
                // If mouse event
                this.hide();
            }
        }
    };
    ChartTooltip.prototype.addEventListeners = function () {
        var _this = this;
        var tooltipRef = select(this.container).select("div.chart-tooltip");
        // Apply the event listeners to close the tooltip
        // setTimeout is there to avoid catching the click event that opened the tooltip
        setTimeout(function () {
            // When ESC is pressed
            window.addEventListener("keydown", _this.handleTooltipEvents);
            // If clicked outside
            _this.container.addEventListener("click", _this.handleTooltipEvents);
            // Stop clicking inside tooltip from bubbling up to window
            tooltipRef.on("click", function () {
                event.stopPropagation();
            });
        }, 0);
    };
    ChartTooltip.prototype.removeEventLinteners = function () {
        // Remove eventlistener to close tooltip when ESC is pressed
        window.removeEventListener("keydown", this.handleTooltipEvents);
        // Remove eventlistener to close tooltip when clicked outside
        this.container.removeEventListener("click", this.handleTooltipEvents);
    };
    return ChartTooltip;
}());
export { ChartTooltip };
//# sourceMappingURL=/home/travis/build/carbon-design-system/carbon-charts/packages/core/components/tooltip.js.map