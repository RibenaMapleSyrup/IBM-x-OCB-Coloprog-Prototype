import { ScaleBand, ScaleLinear } from "d3-scale";
/**
 * enum of all supported charts
 */
export declare enum ChartType {
    BAR = "bar",
    LINE = "line",
    SCATTER = "scatter",
    PIE = "pie",
    DONUT = "donut",
    COMBO = "combo",
}
/**
 * enum of all supported chart themes
 */
export declare enum ChartTheme {
    WHITE = "white",
    G100 = "g100",
    G90 = "g90",
    G10 = "g10",
}
/**
 * enum of all possible tooltip sizes
 */
export declare enum TooltipSize {
    COMPACT = "compact",
    FULL = "",
}
/**
 * enum of all possible threshold themes
 */
export declare enum ThresholdTheme {
    SUCCESS = "success",
    ERROR = "error",
    WARNING = "warning",
}
/**
 * customize the overlay contents
 */
export interface ChartOverlayOptions {
    /**
     * types of overlay states
     */
    types: {
        loading: string;
        noData: string;
    };
    /**
     * raw html to be injected into the overlay container
     */
    innerHTML: {
        loading: string;
        noData: string;
    };
}
/**
 * Base chart options common to any chart
 */
export interface BaseChartOptions {
    /**
     * Internal property to track what type of chart should be instantiated
     */
    type?: ChartType;
    /**
     * boolean to enable accessibility mode
     */
    accessibility?: boolean;
    /**
     * boolean to disable animations (enabled by default)
     */
    animations?: boolean;
    /**
     * boolean to enable/disable legend interactivity
     */
    legendClickable?: boolean;
    /**
     * optional title for chart
     */
    title?: string;
    /**
     * boolean to prevent the container from resizing
     */
    containerResizable?: boolean;
    /**
     * array of hex colors for the chart to render from
     */
    colors: Array<string>;
    /**
     * supported chart theme
     */
    theme?: ChartTheme;
    /**
     * tooltip configuration
     */
    tooltip?: {
        /**
         * specify the size of the tooltip
         */
        size: TooltipSize;
        /**
         * a function to format the tooltip contents
         */
        formatter: Function;
        /**
         * elements onto which a hover or click would not trigger the tooltip to hide
         */
        targetsToSkip: Array<String>;
        /**
         * custom HTML content for tooltip provided by user
         */
        customHTML?: string;
    };
    overlay?: ChartOverlayOptions;
    /**
     * Optional function to generate the fill color based on datasetLabel, label, and/or value
     */
    getFillColor?: (datasetLabel: any, label?: any, value?: any) => string;
    /**
     * Optional function to generate the stroke color based on datasetLabel, label, and/or value
     */
    getStrokeColor?: (datasetLabel: any, label?: any, value?: any) => string;
    /**
     * Optionally specify a width for the chart
     */
    width?: number;
    /**
     * Optionally specify a height for the chart
     */
    height?: number;
    /**
     * Internal property to track keys in the legend
     */
    keys?: Object;
}
/**
 * Options specific to pie charts
 */
export declare type PieChartOptions = BaseChartOptions;
/**
 * Options specific to donut charts
 */
export interface DonutChartOptions extends PieChartOptions {
    center?: {
        label: string;
        number: string;
    };
    centerLabel?: string;
    centerNumber?: string;
}
/**
 * represents a threshold visually bringing attention to specific values/issues
 */
export interface Threshold {
    /**
     * range of values the threshold should apply to
     */
    range: Array<number>;
    /**
     * theme of the threshold
     */
    theme: ThresholdTheme;
}
/**
 * options to configure a scale. not all options are used by all scales
 */
export interface ScaleOptions {
    /**
     * optional title for the scales
     */
    title?: string;
    /**
     * function to adjust the min value
     */
    maxValueAdjuster?: Function;
    /**
     * function to adjust the max value
     */
    minValueAdjuster?: Function;
    /**
     * function to format the ticks
     */
    formatter?: Function;
    /**
     * tick configuration
     */
    ticks?: {
        /**
         * maximum ... number of ticks?
         */
        max: number;
        /**
         * minumum ... number of ticks?
         */
        min: number;
    };
    /**
     * configuration for the thresholds
     */
    thresholds?: Array<Threshold>;
}
/**
 * options to configure a Y (vertical) scale
 */
export interface YScaleOptions extends ScaleOptions {
    /**
     * boolean to indicate whether data should be stacked
     */
    stacked?: boolean;
}
/**
 * options for the x, y, and y2 scales/axis
 */
export interface Scales {
    x: ScaleOptions;
    y: YScaleOptions;
    y2?: YScaleOptions;
}
export interface Axis {
    x: ScaleBand<any>;
    y: ScaleLinear<any, any>;
    y2: ScaleLinear<any, any>;
}
/**
 * Options common to any chart with an axis
 */
export interface AxisChartOptions extends BaseChartOptions {
    /**
     * scale configuration
     */
    scales?: Scales;
    axis?: Axis;
}
/**
 * options specific to line charts
 */
export interface LineChartOptions extends AxisChartOptions {
    /**
     * options for the curve of the line
     */
    curve?: string | {
        name: string;
    };
    /**
     * options for the line points
     */
    points?: {
        /**
         * sets the radius of the point
         */
        radius: number;
        fillOpacity?: number;
    };
}
/**
 * options specific to scatter charts
 */
export interface ScatterChartOptions extends AxisChartOptions {
    /**
     * options for the points
     */
    points?: {
        /**
         * sets the radius of the point
         */
        radius: number;
        fillOpacity?: number;
    };
}
/**
 * options specific to bar charts
 */
export interface BarChartOptions extends AxisChartOptions {
    /**
     * options for all bars
     */
    bars?: {
        /**
         * constrains the bars to a maximum width
         */
        maxWidth: number;
    };
}
/**
 * options specific to bar charts
 */
export declare type StackedBarChartOptions = BarChartOptions;
/**
 * Options specific to combo charts.
 *
 * This interface also extends all other AxisChartOption interfaces as the single config is shared across all charts in a combo
 */
export interface ComboChartOptions extends AxisChartOptions, BarChartOptions, LineChartOptions, ScatterChartOptions {
}
/**
 * Configuration passed to the chart.
 *
 * Includes options and data
 */
export interface ChartConfig<T extends BaseChartOptions> {
    options: T;
    data: ChartData | Promise<ChartData>;
}
export declare const options: {
    BASE: BaseChartOptions;
    AXIS: AxisChartOptions;
    LINE: LineChartOptions;
    SCATTER: ScatterChartOptions;
    BAR: BarChartOptions;
    STACKED_BAR: BarChartOptions;
    COMBO: ComboChartOptions;
    PIE: BaseChartOptions;
    DONUT: DonutChartOptions;
};
export interface DataSet {
    /**
     * Label for the dataset
     */
    label: string;
    /**
     * Array of hex background colors
     */
    backgroundColors: Array<string>;
    /**
     * Array of data values
     */
    data: Array<any>;
    /**
     * chartType - only used with combo charts
     */
    chartType?: ChartType;
}
export interface ChartData {
    /**
     * Labels for the x (horizontal) axis. Should match the number of items in each dataset data array
     */
    labels: Array<string>;
    /**
     * Array of datasets to display in the chart
     */
    datasets: Array<DataSet>;
}
/**
 * General chart options. margins, min/max widths, etc
 */
export declare const charts: {
    margin: {
        top: number;
        bottom: number;
        left: number;
        right: number;
        bar: {
            top: number;
            right: number;
            bottom: number;
            left: number;
        };
        line: {
            top: number;
            right: number;
            bottom: number;
            left: number;
        };
    };
    resetOpacity: {
        opacity: number;
        circle: {
            fill: string;
        };
        outline: string;
    };
    reduceOpacity: {
        opacity: number;
        outline: string;
    };
    points: {
        radius: number;
    };
    patternFills: {
        width: number;
        height: number;
    };
    minWidth: number;
    widthBreak: number;
    marginForLegendTop: number;
    title: {
        marginBottom: number;
    };
    magicRatio: number;
    magicMoreForY2Axis: number;
    axisCharts: {
        minWidth: number;
        minHeight: number;
    };
};
/**
 * Options to render scales to spec
 */
export declare const scales: {
    maxWidthOfAxisLabel: number;
    maxNumOfAxisLabelLetters: number;
    yAxisAngle: number;
    xAxisAngle: number;
    domain: {
        color: string;
        strokeWidth: number;
    };
    dx: string;
    label: {
        dy: string;
    };
    tick: {
        dy: string;
        widthAdditionY: number;
        widthAdditionY2: number;
        heightAddition: number;
        lineHeight: number;
    };
    magicDy1: string;
    magicY1: number;
    magicX1: number;
    y: {
        numberOfTicks: number;
        thresholds: {
            colors: {
                "danger": string;
                "success": string;
                "warning": string;
            };
        };
    };
    x: {
        numberOfTicks: number;
        padding: number;
    };
    y2: {
        numberOfTicks: number;
    };
};
/**
 * Grid options
 */
export declare const grid: {
    strokeColor: string;
};
/**
 * Options for bar behaviour
 */
export declare const bars: {
    mouseover: {
        strokeWidth: number;
        strokeOpacity: number;
    };
    mouseout: {
        strokeWidth: number;
        strokeWidthAccessible: number;
        strokeOpacity: number;
    };
    default: {
        strokeWidth: number;
    };
    spacing: {
        bars: number;
        datasets: number;
    };
    bars: {
        maxWidth: any;
    };
};
/**
 * Options for line behaviour
 */
export declare const lines: {
    points: {
        strokeWidth: number;
        minNonFilledRadius: number;
        mouseover: {
            strokeWidth: number;
            strokeOpacity: number;
            fillOpacity: number;
        };
        mouseout: {
            strokeWidth: number;
            strokeWidthAccessible: number;
            strokeOpacity: number;
        };
    };
};
/**
 * Options for pie behaviour
 */
export declare const pie: {
    maxWidth: number;
    mouseover: {
        strokeWidth: number;
        strokeOpacity: number;
    };
    mouseout: {
        strokeWidth: number;
        strokeOpacity: number;
    };
    sliceLimit: number;
    label: {
        dy: string;
        margin: number;
        other: string;
        fontSize: number;
    };
    callout: {
        sliceDegreeThreshold: number;
        calloutOffsetX: number;
        calloutOffsetY: number;
        calloutTextMargin: number;
        horizontalLineLength: number;
        direction: {
            LEFT: string;
            RIGHT: string;
        };
    };
    default: {
        strokeWidth: number;
    };
    paddingLeft: number;
};
/**
 * Options for donut behaviour
 */
export declare const donut: {
    centerText: {
        title: {
            y: number;
        };
        breakpoint: number;
        magicScaleRatio: number;
        numberFontSize: number;
        titleFontSize: number;
    };
};
/**
 * Legend configuration
 */
export declare const legend: {
    countBreak: number;
    fontSize: number;
    wrapperHeight: string;
    widthTolerance: number;
    hoverShadowSize: string;
    hoverShadowTransparency: number;
    margin: {
        top: number;
    };
    active: {
        borderColor: boolean;
        borderStyle: boolean;
        borderWidth: boolean;
    };
    inactive: {
        backgroundColor: string;
        borderStyle: string;
        borderWidth: string;
    };
    items: {
        status: {
            ACTIVE: number;
            DISABLED: number;
        };
    };
    basedOn: {
        SERIES: string;
        LABELS: string;
    };
};
/**
 * Tooltip options
 */
export declare const tooltip: {
    width: number;
    arrowWidth: number;
    magicXPoint2: number;
    magicTop1: number;
    magicTop2: number;
    magicLeft1: number;
    magicLeft2: number;
    fadeIn: {
        duration: number;
    };
    fadeOut: {
        duration: number;
    };
    size: {
        COMPACT: string;
    };
};
/**
 * Base transition configuration
 */
export declare const transitions: {
    default: {
        duration: number;
    };
    pie_slice_hover: {
        duration: number;
    };
    pie_chart_titles: {
        duration: number;
    };
};
/**
 * Selectors to standardize querying parts of the chart
 */
export declare const selectors: {
    OUTERSVG: string;
    INNERWRAP: string;
    CHARTWRAPPER: string;
    TOOLTIP: string;
    LEGEND_BTN: string;
    pie: {
        SLICE: string;
    };
};
