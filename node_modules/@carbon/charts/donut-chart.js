var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// D3 Imports
import { select } from "d3-selection";
import { interpolateNumber } from "d3-interpolate";
import { PieChart } from "./pie-chart";
import * as Configuration from "./configuration";
import { ChartType } from "./configuration";
import { Tools } from "./tools";
var DonutCenter = /** @class */ (function () {
    function DonutCenter(configs) {
        if (configs) {
            this.configs = configs;
            // Keep track of changes to the configs above
            this.oldConfigs = Tools.merge({}, configs);
        }
        else {
            console.error("Configuration object is missing for DonutCenter");
        }
    }
    DonutCenter.prototype.draw = function (innerWrap) {
        // Add the number shown in the center of the donut
        innerWrap.append("text")
            .attr("class", "donut-figure")
            .attr("text-anchor", "middle")
            .text(this.configs.number.toLocaleString());
        // Add the label below the number in the center of the donut
        innerWrap.append("text")
            .attr("class", "donut-title")
            .attr("text-anchor", "middle")
            .attr("y", Configuration.donut.centerText.title.y)
            .text(this.configs.label);
        this.donutSVG = innerWrap;
    };
    DonutCenter.prototype.update = function () {
        var possiblyNewConfigs = this.configs;
        // If the configs are different from the previous update() call
        if (this.oldConfigs !== possiblyNewConfigs) {
            var newNumber_1 = this.configs.number;
            // Update center number
            this.donutSVG.select("text.donut-figure")
                .transition()
                .duration(Configuration.transitions.default.duration)
                .tween("text", function () {
                return donutCenterNumberTween(select(this), newNumber_1);
            });
            // Update center label
            this.donutSVG.select("text.donut-title")
                .text(this.configs.label);
            // Set the latest configs in record to keep track of future config updates
            this.oldConfigs = Tools.merge({}, this.configs);
        }
    };
    DonutCenter.prototype.resize = function (svgElement, actualChartSize) {
        var dimensionToUseForScale = Math.min(actualChartSize.width, actualChartSize.height);
        var pieConfigs = Configuration.pie;
        var scaleRatio = dimensionToUseForScale / pieConfigs.maxWidth;
        // If the dimensions of the chart are smaller than a certain number (e.g. 175x175)
        // Resize the center text sizes
        if (dimensionToUseForScale < Configuration.donut.centerText.breakpoint) {
            svgElement.select("text.donut-figure")
                .style("font-size", Configuration.donut.centerText.numberFontSize * scaleRatio * Configuration.donut.centerText.magicScaleRatio + "px");
            svgElement.select("text.donut-title")
                .style("font-size", Configuration.donut.centerText.titleFontSize * scaleRatio * Configuration.donut.centerText.magicScaleRatio + "px")
                .attr("y", Configuration.donut.centerText.title.y * scaleRatio * Configuration.donut.centerText.magicScaleRatio);
        }
    };
    return DonutCenter;
}());
export { DonutCenter };
var DonutChart = /** @class */ (function (_super) {
    __extends(DonutChart, _super);
    function DonutChart(holder, configs) {
        var _this = _super.call(this, holder, configs, ChartType.DONUT) || this;
        // Check if the DonutCenter object is provided
        // in the chart configurations
        var _a = configs.options, center = _a.center, centerLabel = _a.centerLabel, centerNumber = _a.centerNumber;
        // TODO 1.0 - Remove deprecated API
        if (center || centerLabel || centerNumber) {
            // Set donut center configs
            // And instantiate the DonutCenter object
            var donutCenterConfigs = _this.getSuppliedCenterConfigs();
            _this.center = new DonutCenter(donutCenterConfigs);
        }
        return _this;
    }
    DonutChart.prototype.draw = function () {
        _super.prototype.draw.call(this);
        // Draw the center text
        if (this.center) {
            // Set donut center configs
            this.setCenterConfigs();
            this.center.draw(this.innerWrap);
        }
    };
    DonutChart.prototype.resizeChart = function () {
        if (this.innerWrap) {
            // Inherit resizing logic from PieChart
            _super.prototype.resizeChart.call(this);
            if (this.center) {
                // Trigger resize on DonutCenter as well
                this.center.resize(this.innerWrap, this.getChartSize(this.container));
            }
        }
    };
    DonutChart.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this.center) {
            // Set donut center configs
            this.setCenterConfigs();
            // Update donut center
            this.center.update();
        }
    };
    DonutChart.prototype.getSuppliedCenterConfigs = function () {
        // TODO 1.0 - Remove deprecated API
        var _a = this.options, center = _a.center, centerLabel = _a.centerLabel, centerNumber = _a.centerNumber;
        var label = center ? center.label : centerLabel;
        var number = center ? center.number : centerNumber;
        // TODO 1.0 - Remove deprecated API
        // Warn developer about deprecation
        if (centerLabel || centerNumber) {
            console.warn("`centerLabel` & `centerNumber` are deprecated and will be removed in v1.0, you should switch to", {
                center: {
                    label: "test",
                    number: 10
                }
            });
        }
        // If a number for donut center has not been provided
        // Use the sum of datapoints
        if (!number && this.displayData) {
            var sumOfDatapoints = this.displayData.datasets[0].data.reduce(function (accum, currVal) { return accum + currVal.value; }, 0);
            number = sumOfDatapoints;
        }
        return {
            label: label,
            number: number
        };
    };
    DonutChart.prototype.setCenterConfigs = function () {
        this.center.configs = this.getSuppliedCenterConfigs();
    };
    return DonutChart;
}(PieChart));
export { DonutChart };
function donutCenterNumberTween(d3Ref, newNumber) {
    // Remove commas from the current value string, and convert to an int
    var currentValue = parseInt(d3Ref.text().replace(/[, ]+/g, ""), 10);
    var i = interpolateNumber(currentValue, newNumber);
    var formatInterpolatedValue = function (number) { return Math.floor(number).toLocaleString(); };
    return function (t) {
        d3Ref.text(formatInterpolatedValue(i(t)));
    };
}
//# sourceMappingURL=/home/travis/build/carbon-design-system/carbon-charts/packages/core/donut-chart.js.map