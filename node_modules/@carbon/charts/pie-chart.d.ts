import { Pie, Arc } from "d3-shape";
import { BaseChart } from "./base-chart";
import * as Configuration from "./configuration";
import { ChartConfig, PieChartOptions, ChartType, ChartData } from "./configuration";
export interface PieDatum {
    label: string;
    value: number;
    items?: Array<PieDatum>;
}
export interface PieDataSet extends Configuration.DataSet {
    data: Array<PieDatum>;
}
export interface PieData {
    labels: Array<string>;
    datasets: Array<PieDataSet>;
}
export declare class PieChart extends BaseChart {
    pie: Pie<PieChart, any>;
    arc: Arc<PieChart, any>;
    hoverArc: Arc<PieChart, any>;
    path: any;
    options: PieChartOptions;
    constructor(holder: Element, configs: ChartConfig<PieChartOptions>, type?: ChartType.PIE | ChartType.DONUT);
    dataProcessor(dataObject: ChartData): PieData;
    initialDraw(): void;
    draw(): void;
    interpolateValues(newData: any): void;
    reduceOpacity(exception?: any): void;
    getTooltipHTML: (d: any) => string;
    addDataPointEventListener(): void;
    update(newData?: any): void;
    resizeChart(): void;
    /**
     * The getChartSize function for pie and donut need to return the size of the
     * graph container while accounting for slice labels, callouts and a top legend.
     * Without accounting for padding, the pie/donut will try to use all space for the circle and labels fall outside.
     * @param container
     */
    getChartSize(container: any): {
        height: number;
        width: number;
    };
    private computeRadius();
    /**
     * This positions the entire chart after it is drawn to account for the labels and callouts
     */
    private positionChart();
    /**
     * Returns the string for the slice labels.
     * @param datapoint data value to get the percentage
     * @param dataset dataset containing all data values
     */
    private getSliceLabelText(datapoint, dataset);
    /**
     * Returns the translate string for the calculated position of the slice labels.
     * @param element the text label element
     * @param d the d3 slice object
     * @param radius the radius of the pie or donut chart
     * @param totalSlices total number of slices rendered
     */
    private getChartLabelTranslateString(element, d, radius, totalSlices?);
    /**
     * Removes the callout with the specified direction.
     * @param dir callout direction "right" or "left"
     */
    private removeCallout(dir);
    /**
     * Draws a line to the text label associated with the slice.
     * @param startPos x,y coordinate to start the callout line
     * @param endPos x,y coordinate to end the callout line
     * @param dir direction of callout (right/left)
     */
    private drawCallout(startPos, endPos, dir);
}
