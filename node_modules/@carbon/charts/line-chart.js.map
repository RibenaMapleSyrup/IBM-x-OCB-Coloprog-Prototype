{"version":3,"file":"line-chart.js","sourceRoot":"","sources":["src/line-chart.ts"],"names":[],"mappings":"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","sourcesContent":["// D3 Imports\nimport { select, selectAll, mouse } from \"d3-selection\";\nimport { line } from \"d3-shape\";\n\nimport { ScatterChart } from \"./scatter-chart\";\nimport * as Configuration from \"./configuration\";\nimport { ChartConfig, LineChartOptions, ChartType } from \"./configuration\";\n\nimport { getD3Curve } from \"./services/curves\";\nimport { Tools } from \"./tools\";\n\nexport class LineChart extends ScatterChart {\n\tlineGenerator: any;\n\n\toptions: LineChartOptions;\n\n\tconstructor(holder: Element, configs: ChartConfig<LineChartOptions>) {\n\t\tsuper(holder, configs);\n\n\t\t// initialize options\n\t\tif (configs.options) {\n\t\t\tthis.options = Tools.merge({}, Configuration.options.LINE, configs.options);\n\t\t} else {\n\t\t\tthis.options = Tools.merge({}, Configuration.options.LINE);\n\t\t}\n\n\t\tthis.options.type = ChartType.LINE;\n\t}\n\n\tdraw() {\n\t\tthis.innerWrap.style(\"width\", \"100%\")\n\t\t\t.style(\"height\", \"100%\");\n\n\t\tconst { line: margins } = Configuration.charts.margin;\n\n\t\tthis.innerWrap.style(\"width\", \"100%\").style(\"height\", \"100%\");\n\n\t\tthis.innerWrap.attr(\"transform\", `translate(${margins.left}, ${margins.top})`);\n\n\t\tlet curveName;\n\t\tlet curveOptions;\n\t\tthis.options.curve = this.options.curve || \"curveLinear\";\n\t\tif (typeof this.options.curve === \"string\") { // curve: 'string'\n\t\t\tcurveName = this.options.curve;\n\t\t\tcurveOptions = {};\n\t\t} else { // curve: { name: 'string' }\n\t\t\tcurveName = this.options.curve.name || \"curveLinear\";\n\t\t\tcurveOptions = this.options.curve;\n\t\t\tdelete curveOptions[\"name\"];\n\t\t}\n\n\t\t// D3 line generator function\n\t\tthis.lineGenerator = line()\n\t\t\t.x((d, i) => this.x(this.displayData.labels[i]) + this.x.step() / 2)\n\t\t\t.y((d: any) => this.y(d))\n\t\t\t.curve(getD3Curve(curveName, curveOptions));\n\n\t\tconst gLines = this.innerWrap.selectAll(\"g.lines\")\n\t\t\t.data(this.displayData.datasets)\n\t\t\t.enter()\n\t\t\t\t.append(\"g\")\n\t\t\t\t.classed(\"lines\", true);\n\n\t\tgLines.append(\"path\")\n\t\t\t.attr(\"stroke\", d => this.getStrokeColor(d.label))\n\t\t\t.datum(d => d.data)\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr(\"d\", this.lineGenerator);\n\n\t\tsuper.draw();\n\t}\n\n\tinterpolateValues(newData: any) {\n\t\tconst { line: margins } = Configuration.charts.margin;\n\t\tconst chartSize = this.getChartSize();\n\t\tconst width = chartSize.width - margins.left - margins.right;\n\t\tconst height = chartSize.height - this.getBBox(\".x.axis\").height;\n\n\t\tthis.innerWrap.selectAll(\".removed\")\n\t\t\t.remove();\n\n\t\t// Apply new data to the lines\n\t\tconst gLines = this.innerWrap.selectAll(\"g.lines\")\n\t\t\t.data(newData.datasets);\n\n\t\tthis.updateElements(true, gLines);\n\n\t\t// Add lines that need to be added now\n\t\tconst addedLineGroups = gLines.enter()\n\t\t\t.append(\"g\")\n\t\t\t.classed(\"lines\", true);\n\n\t\taddedLineGroups.append(\"path\")\n\t\t\t.attr(\"stroke\", d => this.getStrokeColor(d.label))\n\t\t\t.datum(d => d.data)\n\t\t\t.style(\"opacity\", 0)\n\t\t\t.transition(this.getDefaultTransition())\n\t\t\t.style(\"opacity\", 1)\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr(\"d\", this.lineGenerator);\n\n\t\t// Remove lines that are no longer needed\n\t\tgLines.exit()\n\t\t\t.classed(\"removed\", true) // mark this element with \"removed\" class so it isn't reused\n\t\t\t.transition(this.getDefaultTransition())\n\t\t\t.style(\"opacity\", 0)\n\t\t\t.remove();\n\n\t\tsuper.interpolateValues(newData);\n\t}\n\n\tupdateElements(animate: boolean, gLines?: any) {\n\t\tif (!gLines) {\n\t\t\tgLines = this.innerWrap.selectAll(\"g.lines\");\n\t\t}\n\n\t\tconst transitionToUse = animate ? this.getFillTransition() : this.getInstantTransition();\n\t\tconst self = this;\n\t\tgLines.selectAll(\"path.line\")\n\t\t\t.datum(function(d) {\n\t\t\t\tconst parentDatum = select(this.parentNode).datum() as any;\n\n\t\t\t\treturn parentDatum.data;\n\t\t\t})\n\t\t\t.transition(transitionToUse)\n\t\t\t.style(\"opacity\", 1)\n\t\t\t.attr(\"stroke\", function(d) {\n\t\t\t\tconst parentDatum = select(this.parentNode).datum() as any;\n\t\t\t\treturn self.getStrokeColor(parentDatum.label);\n\t\t\t})\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr(\"d\", this.lineGenerator);\n\n\t\tsuper.updateElements(animate);\n\t}\n}\n"]}